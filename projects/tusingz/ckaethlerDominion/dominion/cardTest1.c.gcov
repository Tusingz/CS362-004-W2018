        -:    0:Source:cardTest1.c
        -:    0:Graph:cardTest1.gcno
        -:    0:Data:cardTest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// set NOISY_TEST to 0 to remove printfs from output
        -:    9:#define NOISY_TEST 1
        -:   10://smithy test
        1:   11:int main(){
        -:   12:	int i;
        1:   13:	int seed = 4;
        1:   14:	int numPlayer = 2;
        1:   15:	int player = 0;
        -:   16:	int check;
        1:   17:	int card[10] = {adventurer, council_room, feast, gardens, mine
        -:   18:		, remodel, smithy, village, baron, great_hall};
        -:   19:	struct gameState testGame;
        -:   20:
        -:   21:	#if(NOISY_TEST == 1)
        1:   22:	printf("Test player %d playing a smithy starting hand size %d \n\n", player+1, 5);
        -:   23:	#endif
        -:   24:
        1:   25:	check = initializeGame(numPlayer, card, seed, &testGame);
        1:   26:	int coin_bonus = 0;
        3:   27:		for (i = 0; i < numPlayer; ++i)
        -:   28:	{
        2:   29:		testGame.handCount[i] = 5;
        -:   30:	}
        -:   31:
        1:   32:	cardEffect(smithy, 0, 0, 0, &testGame, 0, &coin_bonus);
        -:   33:
        -:   34:	#if(NOISY_TEST == 1)
        1:   35:	printf("Players hand size %d = %d(expected hand size) \n\n", testGame.handCount[player], 7);
        -:   36:	#endif
        -:   37:
        1:   38:	assert(testGame.handCount[player] == 7);
        -:   39:
        1:   40:	printf("All tests passed!\n");
        -:   41:
        1:   42:	return check;
        -:   43:}
